1.启动 Tomcat:
D:\apache-tomcat-8.5.15\bin\startup.bat


*********************》》001：JSP 语法
脚本程序的语法格式：
<% 代码片段 %>
或者
<jsp:scriptlet>
   代码片段
</jsp:scriptlet>


1.JSP声明：
格式 <%! declaration; [ declaration; ]+ ... %>
示例 <%! int i = 0; %>
或者
<jsp:declaration>
   代码片段
</jsp:declaration>

2.JSP表达式:
格式 <%= 表达式 %>
示例 <%= (new java.util.Date()).toLocaleString()%>
或者
<jsp:expression>
   表达式
</jsp:expression>

3.JSP注释：
<%-- 注释 --%>   JSP注释，注释内容不会被发送至浏览器甚至不会被编译
<!-- 注释 -->    HTML注释，通过浏览器查看网页源代码时可以看见注释内容 

4.JSP几个显示常量：
<\%   代表静态 <%常量
%\>   代表静态 %> 常量
\'    在属性中使用的单引号
\"    在属性中使用的双引号

5.JSP指令：
指令语法格式  <%@ directive attribute="value" %>
<%@ page ... %> 	定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等
<%@ include ... %> 	包含其他文件
<%@ taglib ... %> 	引入标签库的定义，可以是自定义标签

6.JSP行为：
行为标签语法格式  <jsp:action_name attribute="value" />
jsp:include 	    用于在当前页面中包含静态或动态资源
jsp:useBean 	    寻找和初始化一个JavaBean组件
jsp:setProperty 	设置 JavaBean组件的值
jsp:getProperty     将 JavaBean组件的值插入到 output中
jsp:forward 	    从一个JSP文件向另一个文件传递一个包含用户请求的request对象
sp:plugin 	        用于在生成的HTML页面中包含Applet和JavaBean对象
jsp:element 	    动态创建一个XML元素
jsp:attribute 	    定义动态创建的XML元素的属性
jsp:body 	        定义动态创建的XML元素的主体
jsp:text 	        用于封装模板数据

7.JSP隐含对象（九个自动定义的变量）
request 	    HttpServletRequest类的实例
response 	    HttpServletResponse类的实例
out 	        PrintWriter类的实例，用于把结果输出至网页上
session 	    HttpSession类的实例
application 	ServletContext类的实例，与应用上下文有关
config 	        ServletConfig类的实例
pageContext 	PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问
page 	        类似于Java类中的this关键字
Exception 	    Exception类的对象，代表发生错误的JSP页面中对应的异常对象

8. 控制流语句
JSP提供对Java语言的全面支持。您可以在JSP程序中使用Java API甚至建立Java代码块，包括判断语句和循环语句等等。
1).判断语句
If...else块
switch...case块
2).循环语句
for，
while，
do…while


*********************》》002：JSP指令
<%@ directive attribute="value" %>
1.Page指令
Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令
语法格式：
<%@ page attribute="value" %>
page指令相关属性：
buffer              指定out对象使用缓冲区的大小 
autoFlush           控制out对象的 缓存区 
contentType         指定当前JSP页面的MIME类型和字符编码 
errorPage           指定当JSP页面发生异常时需要转向的错误处理页面 
isErrorPage         指定当前页面是否可以作为另一个JSP页面的错误处理页面 
extends             指定servlet从哪一个类继承 
import              导入要使用的Java类 
info                定义JSP页面的描述信息 
isThreadSafe        指定对JSP页面的访问是否为线程安全 
language            定义JSP页面所用的脚本语言，默认是Java 
session             指定JSP页面是否使用session 
isELIgnored         指定是否执行EL表达式 
isScriptingEnabled  确定脚本元素能否被使用 

2.Include指令
JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。
语法格式：
<%@ include file="文件相对 url 地址" %>

3.Taglib指令
JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。
Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。
语法格式：
<%@ taglib uri="uri" prefix="prefixOfTag" %>
uri属性确定标签库的位置，prefix属性指定标签库的前缀。


*********************》》003：JSP 动作元素
JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的。
利用JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面、为Java插件生成HTML代码。
语法 <jsp:action_name attribute="value" />
1.语法:
jsp:include	    在页面被请求的时候引入一个文件。
jsp:useBean	    寻找或者实例化一个JavaBean。
jsp:setProperty	设置JavaBean的属性。
jsp:getProperty	输出某个JavaBean的属性。
jsp:forward	    把请求转到一个新的页面。
jsp:plugin	    根据浏览器类型为Java插件生成OBJECT或EMBED标记。
jsp:element	    定义动态XML元素
jsp:attribute	设置动态定义的XML元素属性。
jsp:body	    设置动态定义的XML元素内容。
jsp:text	    在JSP页面和文档中使用写入文本的模板

2.常见的属性
 id属性：
id属性是动作元素的唯一标识，可以在JSP页面中引用。动作元素创建的id值可以通过PageContext来调用。
 scope属性：
该属性用于识别动作元素的生命周期。 id属性和scope属性有直接关系，scope属性定义了相关联id对象的寿命。 scope属性有四个可能的值： (a) page, (b)request, (c)session, 和 (d) application。 

3.<jsp:include>动作元素 
jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：
<jsp:include page="相对 URL 地址" flush="true" />
include动作相关的属性列表:
page	包含在页面中的相对URL地址。
flush	布尔属性，定义在包含资源前是否刷新缓存区。

4.<jsp:useBean>动作元素
jsp:useBean 动作用来加载一个将在JSP页面中使用的JavaBean。 这个功能非常有用，因为它使得我们可以发挥 Java 组件复用的优势。
 语法为：
 <jsp:useBean id="name" class="package.class" />
 在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。
以下是useBean动作相关的属性列表。
class	    指定Bean的完整包名。
type	    指定将引用该对象变量的类型。
beanName	通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。

5.<jsp:setProperty>动作元素
jsp:setProperty用来设置已经实例化的Bean对象的属性，有两种用法。
1).在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示： 
    <jsp:useBean id="myName" ... />
    ...
    <jsp:setProperty name="myName" property="someProperty" .../>
  此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行  
2).把jsp:setProperty放入jsp:useBean元素的内部，如下所示： 
    <jsp:useBean id="myName" ... >
    ...
       <jsp:setProperty name="myName" property="someProperty" .../>
    </jsp:useBean>
  此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。 
jsp:setProperty动作有下面四个属性,如下表：
name	    name属性是必需的。它表示要设置属性的是哪个Bean。
property	property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是"*"，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。
value	    value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如"true"）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如"42"）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。
param	    param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。 

6.<jsp:getProperty>动作元素
jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。语法格式如下：
    <jsp:useBean id="myName" ... />
    ...
    <jsp:getProperty name="myName" property="someProperty" .../>
下表是与getProperty相关联的属性：
name	    要检索的Bean属性名称。Bean必须已定义。
property	表示要提取Bean属性的值
    
7.<jsp:forward> 动作元素  
jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。语法格式如下所示：
<jsp:forward page="相对 URL 地址" />
page	page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.

8.<jsp:plugin>动作元素
jsp:plugin动作用来根据浏览器的类型，插入通过Java插件 运行Java Applet所必需的OBJECT或EMBED元素。
如果需要的插件不存在，它会下载插件，然后执行Java组件。 Java组件可以是一个applet或一个JavaBean。
plugin动作有多个对应HTML元素的属性用于格式化Java 组件。param元素可用于向Applet 或 Bean 传递参数。
以下是使用plugin 动作元素的典型实例:
    <jsp:plugin type="applet" codebase="dirname" code="MyApplet.class"
                               width="60" height="80">
       <jsp:param name="fontcolor" value="red" />
       <jsp:param name="background" value="black" />
       <jsp:fallback>
          Unable to initialize Java Plugin
       </jsp:fallback>
    </jsp:plugin>
    
9.<jsp:element> 、 <jsp:attribute>、 <jsp:body>动作元素
<jsp:element> 、 <jsp:attribute>、 <jsp:body>动作元素动态定义XML元素。动态是非常重要的，这就意味着XML元素在编译时是动态生成的而非静态。
以下实例动态定义了XML元素：
    <jsp:element name="xmlElement">
    <jsp:attribute name="xmlElementAttr">
       属性值
    </jsp:attribute>
    <jsp:body>
       XML 元素的主体
    </jsp:body>
    </jsp:element>

9.<jsp:text>动作元素
<jsp:text>动作元素允许在JSP页面和文档中使用写入文本的模板，语法格式如下：
<jsp:text>模板数据</jsp:text>
例子：
    <jsp:text><![CDATA[<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">]]>
    </jsp:text>
    <head><title>jsp:text action</title></head>
    <body>
    <books><book><jsp:text>  
        Welcome to JSP Programming
    </jsp:text></book></books>
    </body>
    </html>


*********************》》004：JSP 隐式对象
JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。
JSP所支持的九大隐式对象：
request 	    HttpServletRequest 接口的实例
response 	    HttpServletResponse 接口的实例
out 	        JspWriter类的实例，用于把结果输出至网页上
session 	    HttpSession类的实例
application 	ServletContext类的实例，与应用上下文有关
config 	        ServletConfig类的实例
pageContext 	PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问
page 	        类似于Java类中的this关键字
Exception 	    Exception类的对象，代表发生错误的JSP页面中对应的异常对象

1.request对象
request对象是javax.servlet.http.HttpServletRequest 类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。
request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等。

2. response对象
response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的response对象。
response对象也定义了处理HTTP头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等等。

3.out对象
out对象是 javax.servlet.jsp.JspWriter 类的实例，用来在response对象中写入内容。
最初的JspWriter类对象根据页面是否有缓存来进行不同的实例化操作。可以在page指令中使用buffered='false'属性来轻松关闭缓存。
JspWriter类包含了大部分java.io.PrintWriter类中的方法。不过，JspWriter新增了一些专为处理缓存而设计的方法。还有就是，JspWriter类会抛出IOExceptions异常，而PrintWriter不会。
下表列出了我们将会用来输出boolean，char，int，double，String，object等类型数据的重要方法：
out.print(dataType dt) 	    输出Type类型的值
out.println(dataType dt) 	输出Type类型的值然后换行
out.flush() 	            刷新输出流

4. session对象
session对象是 javax.servlet.http.HttpSession 类的实例。和Java Servlets中的session对象有一样的行为。
session对象用来跟踪在各个客户端请求间的会话。

5. application对象
application对象直接包装了servlet的ServletContext类的对象，是javax.servlet.ServletContext 类的实例。
这个对象在JSP页面的整个生命周期中都代表着这个JSP页面。这个对象在JSP页面初始化时被创建，随着jspDestroy()方法的调用而被移除。
通过向application中添加属性，则所有组成您web应用的JSP文件都能访问到这些属性。

6. config对象
config对象是 javax.servlet.ServletConfig 类的实例，直接包装了servlet的ServletConfig类的对象。
这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。
以下是config对象的使用方法，不是很重要，所以不常用：
config.getServletName();
它返回包含在<servlet-name>元素中的servlet名字，注意，<servlet-name>元素在 WEB-INF\web.xml 文件中定义。

7. pageContext 对象
pageContext对象是javax.servlet.jsp.PageContext 类的实例，用来代表整个JSP页面。
这个对象主要用来访问页面信息，同时过滤掉大部分实现细节。
这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象可以通过访问这个对象的属性来导出。
pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL,页面scope等。
PageContext类定义了一些字段，包括PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。它也提供了40余种方法，有一半继承自javax.servlet.jsp.JspContext 类。
其中一个重要的方法就是removeArribute()，它可接受一个或两个参数。比如，pageContext.removeArribute("attrName")移除四个scope中相关属性，但是下面这种方法只移除特定scope中的相关属性：
pageContext.removeAttribute("attrName", PAGE_SCOPE);

8. page 对象
这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表。
page 对象就是this对象的同义词。

9. exception 对象
exception 对象包装了从先前页面中抛出的异常信息。它通常被用来产生对出错条件的适当响应。


*********************》》005：JSP 客户端请求
JSP 客户端请求
当浏览器请求一个网页时，它会向网络服务器发送一系列不能被直接读取的信息，因为这些信息是作为HTTP信息头的一部分来传送的。您可以查阅HTTP协议来获得更多的信息。
1.下表列出了浏览器端信息头的一些重要内容，在以后的网络编程中将会经常见到这些信息：
Accept 	            指定浏览器或其他客户端可以处理的MIME类型。它的值通常为 image/png 或 image/jpeg
Accept-Charset 	    指定浏览器要使用的字符集。比如 ISO-8859-1
Accept-Encoding 	指定编码类型。它的值通常为 gzip 或compress
Accept-Language 	指定客户端首选语言，servlet会优先返回以当前语言构成的结果集，如果servlet支持这种语言的话。比如 en，en-us，ru等等
Authorization 	    在访问受密码保护的网页时识别不同的用户
Connection 	        表明客户端是否可以处理HTTP持久连接。持久连接允许客户端或浏览器在一个请求中获取多个文件。Keep-Alive 表示启用持久连接
Content-Length 	    仅适用于POST请求，表示 POST 数据的字节数
Cookie 	            返回先前发送给浏览器的cookies至服务器
Host 	            指出原始URL中的主机名和端口号
If-Modified-Since 	表明只有当网页在指定的日期被修改后客户端才需要这个网页。 服务器发送304码给客户端，表示没有更新的资源
If-Unmodified-Since 	与If-Modified-Since相反， 只有文档在指定日期后仍未被修改过，操作才会成功
Referer 	    标志着所引用页面的URL。比如，如果你在页面1，然后点了个链接至页面2，那么页面1的URL就会包含在浏览器请求页面2的信息头中
User-Agent 	    用来区分不同浏览器或客户端发送的请求，并对不同类型的浏览器返回不同的内容

2.HttpServletRequest类
request对象是javax.servlet.http.HttpServletRequest类的实例。每当客户端请求一个页面时，JSP引擎就会产生一个新的对象来代表这个请求。
request对象提供了一系列方法来获取HTTP信息头，包括表单数据，cookies，HTTP方法等等。
接下来将会介绍一些在JSP编程中常用的获取HTTP信息头的方法。详细内容请见下表：
1)	Cookie[] getCookies()
	返回客户端所有的Cookie的数组
2)	Enumeration getAttributeNames()
	返回request对象的所有属性名称的集合
3)	Enumeration getHeaderNames()
	返回所有HTTP头的名称集合
4)	Enumeration getParameterNames()
	返回请求中所有参数的集合
5)	HttpSession getSession()
	返回request对应的session对象，如果没有，则创建一个
6)	HttpSession getSession(boolean create)
	返回request对应的session对象，如果没有并且参数create为true，则返回一个新的session对象
7)	Locale getLocale()
	返回当前页的Locale对象，可以在response中设置
8)	Object getAttribute(String name)
	返回名称为name的属性值，如果不存在则返回null。
9)	ServletInputStream getInputStream()
	返回请求的输入流
10)	String getAuthType()
	返回认证方案的名称，用来保护servlet，比如 "BASIC" 或者 "SSL" 或 null 如果 JSP没设置保护措施
11)	String getCharacterEncoding()
	返回request的字符编码集名称
12)	String getContentType()
	返回request主体的MIME类型，若未知则返回null
13)	String getContextPath()
	返回request URI中指明的上下文路径
14)	String getHeader(String name)
	返回name指定的信息头
15)	String getMethod()
	返回此request中的HTTP方法，比如 GET,，POST，或PUT
16)	String getParameter(String name)
	返回此request中name指定的参数，若不存在则返回null
17)	String getPathInfo()
	返回任何额外的与此request URL相关的路径
18)	String getProtocol()
	返回此request所使用的协议名和版本
19)	String getQueryString()
	返回此 request URL包含的查询字符串
20)	String getRemoteAddr()
	返回客户端的IP地址
21)	String getRemoteHost()
	返回客户端的完整名称
22)	String getRemoteUser()
	返回客户端通过登录认证的用户，若用户未认证则返回null
23)	String getRequestURI()
	返回request的URI
24)	String getRequestedSessionId()
	返回request指定的session ID
25)	String getServletPath()
	返回所请求的servlet路径
26)	String[] getParameterValues(String name)
	返回指定名称的参数的所有值，若不存在则返回null
27)	boolean isSecure()
	返回request是否使用了加密通道，比如HTTPS
28)	int getContentLength()
	返回request主体所包含的字节数，若未知的返回-1
29)	int getIntHeader(String name)
	返回指定名称的request信息头的值
30)	int getServerPort()
	返回服务器端口号

 
*********************》》006：JSP 服务器响应
JSP 服务器响应
Response响应对象主要将JSP容器处理后的结果传回到客户端。可以通过response变量设置HTTP的状态和向客户端发送数据，如Cookie、HTTP文件头信息等。
1.一个典型的响应看起来就像下面这样：
HTTP/1.1 200 OK
Content-Type: text/html
Header2: ...
...
HeaderN: ...
  (空行)
<!doctype ...>
<html>
<head>...</head>
<body>
...
</body>
</html>
 状态行包含HTTP版本信息，比如HTTP/1.1，一个状态码，比如200，还有一个非常短的信息对应着状态码，比如OK。

2.下表摘要出了HTTP1.1响应头中最有用的部分，在网络编程中您将会经常见到它们：
Allow 	        指定服务器支持的request方法（GET，POST等等）
Cache-Control 	指定响应文档能够被安全缓存的情况。通常取值为 public，private 或no-cache 等等。 Public意味着文档可缓存，Private意味着文档只为单用户服务并且只能使用私有缓存。No-cache 意味着文档不被缓存。
Connection 	    命令浏览器是否要使用持久的HTTP连接。close值 命令浏览器不使用持久HTTP连接，而keep-alive 意味着使用持久化连接。
Content-Disposition 	让浏览器要求用户将响应以给定的名称存储在磁盘中
Content-Encoding 	    指定传输时页面的编码规则
Content-Language 	    表述文档所使用的语言，比如en， en-us,，ru等等
Content-Length 	    表明响应的字节数。只有在浏览器使用持久化 (keep-alive) HTTP 连接时才有用
Content-Type 	    表明文档使用的MIME类型
Expires 	        指明啥时候过期并从缓存中移除
Last-Modified 	    指明文档最后修改时间。客户端可以 缓存文档并且在后续的请求中提供一个 If-Modified-Since请求头
Location 	    在300秒内，包含所有的有一个状态码的响应地址，浏览器会自动重连然后检索新文档
Refresh 	    指明浏览器每隔多久请求更新一次页面。
Retry-After 	与503 (Service Unavailable)一起使用来告诉用户多久后请求将会得到响应
Set-Cookie 	    指明当前页面对应的cookie

3.HttpServletResponse类
response 对象是 javax.servlet.http.HttpServletResponse 类的一个实例。就像服务器会创建request对象一样，它也会创建一个客户端响应。
response对象定义了处理创建HTTP信息头的接口。通过使用这个对象，开发者们可以添加新的cookie或时间戳，还有HTTP状态码等等。
下表列出了用来设置HTTP响应头的方法，这些方法由HttpServletResponse 类提供：
1)	String encodeRedirectURL(String url)
	对sendRedirect()方法使用的URL进行编码
2)	String encodeURL(String url)
	将URL编码，回传包含Session ID的URL
3)	boolean containsHeader(String name)
	返回指定的响应头是否存在
4)	boolean isCommitted()
	返回响应是否已经提交到客户端
5)	void addCookie(Cookie cookie)
	添加指定的cookie至响应中
6)	void addDateHeader(String name, long date)
	添加指定名称的响应头和日期值
7)	void addHeader(String name, String value)
	添加指定名称的响应头和值
8)	void addIntHeader(String name, int value)
	添加指定名称的响应头和int值
9)	void flushBuffer()
	将任何缓存中的内容写入客户端
10)	void reset()
	清除任何缓存中的任何数据，包括状态码和各种响应头
11)	void resetBuffer()
	清除基本的缓存数据，不包括响应头和状态码
12)	void sendError(int sc)
	使用指定的状态码向客户端发送一个出错响应，然后清除缓存
13)	void sendError(int sc, String msg)
	使用指定的状态码和消息向客户端发送一个出错响应
14)	void sendRedirect(String location)
	使用指定的URL向客户端发送一个临时的间接响应
15)	void setBufferSize(int size)
	设置响应体的缓存区大小
16)	void setCharacterEncoding(String charset)
	指定响应的编码集（MIME字符集），例如UTF-8
17)	void setContentLength(int len)
	指定HTTP servlets中响应的内容的长度，此方法用来设置 HTTP Content-Length 信息头
18)	void setContentType(String type)
	设置响应的内容的类型，如果响应还未被提交的话
19)	void setDateHeader(String name, long date)
	使用指定名称和值设置响应头的名称和内容
20)	void setHeader(String name, String value)
	使用指定名称和值设置响应头的名称和内容
21)	void setIntHeader(String name, int value)
	指定 int 类型的值到 name 标头
22)	void setLocale(Locale loc)
	设置响应的语言环境，如果响应尚未被提交的话
23)	void setStatus(int sc)
	设置响应的状态码


*********************》》007：JSP HTTP 状态码
HTTP请求与HTTP响应的格式相近，都有着如下结构：
    以状态行+CRLF（回车换行）开始
    零行或多行头模块+CRLF
    一个空行，比如CRLF
    可选的消息体比如文件，查询数据，查询输出
举例来说，一个服务器响应头看起来就像下面这样： 
HTTP/1.1 200 OK
Content-Type: text/html
Header2: ...
...
HeaderN: ...
  (Blank Line)
<!doctype ...>
<html>
<head>...</head>
<body>
...
</body>
</html>

状态行包含HTTP版本，一个状态码，和状态码相对应的短消息。
1.下表列出了可能会从服务器返回的HTTP状态码和与之关联的消息：
状态码	消息	描述
100	Continue	只有一部分请求被服务器接收，但只要没被服务器拒绝，客户端就会延续这个请求
101	Switching Protocols	服务器交换机协议
200	OK	请求被确认
201	Created	请求时完整的，新的资源被创建
202	Accepted	请求被接受，但未处理完
203	Non-authoritative Information	
204	No Content	
205	Reset Content	
206	Partial Content	
300	Multiple Choices	一个超链接表，用户可以选择一个超链接并访问，最大支持5个超链接
301	Moved Permanently	被请求的页面已经移动到了新的URL下
302	Found	被请求的页面暂时性地移动到了新的URL下
303	See Other	被请求的页面可以在一个不同的URL下找到
304	Not Modified	
305	Use Proxy	
306	Unused	已经不再使用此状态码，但状态码被保留
307	Temporary Redirect	被请求的页面暂时性地移动到了新的URL下
400	Bad Request	服务器无法识别请求
401	Unauthorized	被请求的页面需要用户名和密码
402	Payment Required	目前还不能使用此状态码
403	Forbidden	禁止访问所请求的页面
404	Not Found	服务器无法找到所请求的页面
405	Method Not Allowed	请求中所指定的方法不被允许
406	Not Acceptable	服务器只能创建一个客户端无法接受的响应
407	Proxy Authentication Required	在请求被服务前必须认证一个代理服务器
408	Request Timeout	请求时间超过了服务器所能等待的时间，连接被断开
409	Conflict	请求有矛盾的地方
410	Gone	被请求的页面不再可用
411	Length Required	"Content-Length"没有被定义，服务器拒绝接受请求
412	Precondition Failed	请求的前提条件被服务器评估为false
413	Request Entity Too Large	因为请求的实体太大，服务器拒绝接受请求
414	Request-url Too Long	服务器拒绝接受请求，因为URL太长。多出现在把"POST"请求转换为"GET"请求时所附带的大量查询信息
415	Unsupported Media Type	服务器拒绝接受请求，因为媒体类型不被支持
417	Expectation Failed	
500	Internal Server Error	请求不完整，服务器遇见了出乎意料的状况
501	Not Implemented	请求不完整，服务器不提供所需要的功能
502	Bad Gateway	请求不完整，服务器从上游服务器接受了一个无效的响应
503	Service Unavailable	请求不完整，服务器暂时重启或关闭
504	Gateway Timeout	网关超时
505	HTTP Version Not Supported	服务器不支持所指定的HTTP版本

2.设置HTTP状态码的方法
1	public void setStatus ( int statusCode )
	此方法可以设置任意的状态码。如果您的响应包含一个特殊的状态码和一个文档，请确保在用PrintWriter返回任何内容前调用setStatus方法
2	public void sendRedirect(String url)
	此方法产生302响应，同时产生一个 Location 头告诉URL 一个新的文档
3	public void sendError(int code, String message)
	此方法将一个状态码(通常为 404)和一个短消息，自动插入HTML文档中并发回给客户端


*********************》》008：JSP 表单处理
我们在浏览网页的时候，经常需要向服务器提交信息，并让后台程序处理。浏览器中使用 GET 和 POST 方法向服务器提交数据
1.GET 方法
GET方法将请求的编码信息添加在网址后面，网址与编码信息通过"?"号分隔。如下所示：
http://127.0.0.1:8080/TomcatTest/?name=hy%E6%98%A5&url=http//:www.baidu.com
GET方法是浏览器默认传递参数的方法，一些敏感信息，如密码等建议不使用GET方法。
用get时，传输数据的大小有限制 （注意不是参数的个数有限制），最大为1024字节。

2.POST 方法
一些敏感信息，如密码等我们可以通过POST方法传递，POST提交数据是隐式的。
POST提交数据是不可见的，GET是通过在url里面传递的（可以看一下你浏览器的地址栏）。
JSP使用getParameter()来获得传递的参数，getInputStream()方法用来处理客户端的二进制数据流的请求。

3.JSP 读取表单数据
    getParameter(): 使用 request.getParameter() 方法来获取表单参数的值。
    getParameterValues(): 获得如checkbox类（名字相同，但值有多个）的数据。 接收数组变量 ，如checkbox类型
    getParameterNames():该方法可以取得所有变量的名称，该方法返回一个 Enumeration。
    getInputStream():调用此方法来读取来自客户端的二进制数据流。


*********************》》009：JSP 过滤器
JSP 和 Servlet 中的过滤器都是 Java 类。
过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。
可以将一个或多个过滤器附加到一个 Servlet 或一组 Servlet。过滤器也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。

1.Servlet 过滤器方法
过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：
1)	public void doFilter (ServletRequest, ServletResponse, FilterChain)
该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet 容器将先调用过滤器的 doFilter 方法。FilterChain 用于访问后续过滤器。
2)	public void init(FilterConfig filterConfig)
web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。
3)	public void destroy()
Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。

2.过滤器的应用顺序
web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。

3.web.xml配置各节点说明
    <filter>指定一个过滤器。
        <filter-name>用于为过滤器指定一个名字，该元素的内容不能为空。
        <filter-class>元素用于指定过滤器的完整的限定类名。
        <init-param>元素用于为过滤器指定初始化参数，它的子元素<param-name>指定参数的名字，<param-value>指定参数的值。
        在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。
    <filter-mapping>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径
        <filter-name>子元素用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字
        <url-pattern>设置 filter 所拦截的请求路径(过滤器关联的URL样式)
    <servlet-name>指定过滤器所拦截的Servlet名称。
    <dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher>子元素用来指定 Filter 对资源的多种调用方式进行拦截。
    <dispatcher>子元素可以设置的值及其意义
        REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。
        INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。
        FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。
        ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。

4.总结：
一、Filter 的基本工作原理
    1、Filter 程序是一个实现了特殊接口的 Java 类，与 Servlet 类似，也是由 Servlet 容器进行调用和执行的。
    2、当在 web.xml 注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，它可以决定是否将请求继续传递给 Servlet 程序，以及对请求和响应消息是否进行修改。
    3、当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter 程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service 方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service 方法。
    4、但在 Filter.doFilter 方法中不能直接调用 Servlet 的 service 方法，而是调用 FilterChain.doFilter 方法来激活目标 Servlet 的 service 方法，FilterChain 对象时通过 Filter.doFilter 方法的参数传递进来的。
    5、只要在 Filter.doFilter 方法中调用 FilterChain.doFilter 方法的语句前后增加某些程序代码，这样就可以在 Servlet 进行响应前后实现某些特殊功能。
    6、如果在 Filter.doFilter 方法中没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法不会被执行，这样通过 Filter 就可以阻止某些非法的访问请求。

二、Filter 链
    1、在一个 Web 应用程序中可以注册多个 Filter 程序，每个 Filter 程序都可以对一个或一组 Servlet 程序进行拦截。如果有多个 Filter 程序都可以对某个 Servlet 程序的访问过程进行拦截，当针对该 Servlet 的访问请求到达时，Web 容器将把这多个 Filter 程序组合成一个 Filter 链（也叫过滤器链）。
    2、Filter 链中的各个 Filter 的拦截顺序与它们在 web.xml 文件中的映射顺序一致，上一个 Filter.doFilter 方法中调用 FilterChain.doFilter 方法将激活下一个 Filter的doFilter 方法，最后一个 Filter.doFilter 方法中调用的 FilterChain.doFilter 方法将激活目标 Servlet的service 方法。
    3、只要 Filter 链中任意一个 Filter 没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法都不会被执行。

三、Filter 接口
    一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init、doFilter、destory。
    1、init 方法
    （1）、在 Web 应用程序启动时，Web 服务器（Web 容器）将根据其 web.xml 文件的配置信息来创建每个注册的 Filter 的实例对象，并将其保存在内存中。
    （2）、Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法。init 方法在 Filter 生命周期中仅被执行一次，Web 容器在调用 init 方法时，会传递一个包含 Filter 的配置和运行环境信息的 FilterConfig 对象。
    public void init(FilterConfig filterConfig) throws ServletException
    （3）开发人员可以在 init 方法中完成与构造方法类似的初始化功能，要注意的是：如果初始化代码要使用到 FilterConfig 对象，这些代码只能在 init 方法中编写，而不能在构造方法中编写（尚未调用 init 方法，即并没有创建 FilterConfig 对象，要使用它则必然出错）。 
    2、doFilter 方法
    当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法。
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws java.io.IOException.ServletException
    其中，参数 request 和 response 为 Web 容器或 Filter 链中上一个 Filter 传递过来的请求和响应对象；参数 chain 为代表当前 Filter 链的对象。
    3、destroy 方法
    该方法在 Web 容器卸载 Filter 对象之前被调用，也仅执行一次。可以完成与 init 方法相反的功能，释放被该 Filter 对象打开的资源，例如：关闭数据库连接和 IO 流。

四、FilterChain 接口
    该接口用于定义一个 Filter 链的对象应该对外提供的方法，这个接口只定义了一个 doFilter 方法。
    public void doFilter(ServletRequest request, ServletResponse response) throws java.io.IOException.ServletException
    FilterChain 接口的 doFilter 方法用于通知 Web 容器把请求交给 Filter 链中的下一个 Filter 去处理，如果当前调用此方法的 Filter 对象是Filter 链中的最后一个 Filter，那么将把请求交给目标 Servlet 程序去处理。

五、FilterConfig 接口
    1、与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。
    2、FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。
    3、FilterConfig接口定义的各个方法：
        getFilterName 方法，返回 <filter-name> 元素的设置值。
        getServletContext 方法，返回 FilterConfig 对象中所包装的 ServletContext 对象的引用。
        getInitParameter 方法，用于返回在 web.xml 文件中为 Filter 所设置的某个名称的初始化的参数值。
        getInitParameterNames 方法，返回一个 Enumeration 集合对象。

六、Filter 的注册与映射
    1、注册 Filter
    一个 <filter> 元素用于注册一个 Filter。其中，<filter-name> 元素是必需的，<filter-class> 元素也是必需的，<init-param> 元素是可选的，可以有多个 < init-param> 元素。
        <filter>
            <filter-name>FirstFilter</filter-name>
            <filter-class>FirstFilter</filter-class>
            <init-param>
                <param-name>encoding</param-name>
                <param-value>GB2312</param-value>
            </init-param>
        </filter>
    2、映射 Filter
    <filter-mapping> 元素用于设置一个 Filter 所负责拦截的资源。一个 Filter 拦截的资源可以通过两种方式来指定：资源的访问请求路径和 Servlet 名称。
    第一种：指定资源的访问路径
        <filter-mapping>
            <filter-name>FirstFilter</filter-name>
            <url-pattern>/*</url-pattern>
        </filter-mapping>   
    <url-pattern> 元素中的访问路径的设置方式遵循 Servlet 的 URL 映射规范。
    /*：表示拦截所有的访问请求。
    /filter/*：表示拦截 filter 目录下的所有访问请求，如：http://localhost:8888/testFilter_001/filter/xxxxxx 。
    /test.html：表示拦截根目录下以 test.html 为资源名的访问请求，访问链接只会是：http://localhost:8888/test.html。
    第二种：指定 Servlet 的名称
        <filter-mapping>
            <filter-name>FirstFilter</filter-name>
            <servlet-name>default></servlet-name>
            <dispatcher>INCLUDE</dispatcher>
            <dispatcher>REQUEST</dispatcher>
        </filter-mapping>
    （1）、<servlet-name> 元素与 <url-pattern> 元素是二选一的关系，其值是某个 Servlet 在 web.xml 文件中的注册名称。
    （2）、<dispatcher> 元素的设置值有 4 种：REQUEST、INCLUDE、FORWARD、ERROR，分别对应 Servlet 容器调用资源的 4 种方式：
    通过正常的访问请求调用；
    通过 RequestDispatcher.include 方法调用；
    通过 RequestDispatcher.forward 方法调用；
    作为错误响应资源调用。
    如果没有设置 <dispatcher> 子元素，则等效于 REQUEST 的情况。也可以设置多个 <dispatcher> 子元素，用于指定 Filter 对资源的多种调用方式都进行拦截。
    
    
*********************》》010：JSP Cookie 处理
Cookie 是存储在客户机的文本文件，它们保存了大量轨迹信息。在 Servlet 技术基础上，JSP 显然能够提供对 HTTP cookie 的支持。
通常有三个步骤来识别回头客：
    服务器脚本发送一系列 cookie 至浏览器。比如名字，年龄，ID 号码等等。
    浏览器在本地机中存储这些信息，以备不时之需。
    当下一次浏览器发送任何请求至服务器时，它会同时将这些 cookie 信息发送给服务器，然后服务器使用这些信息来识别用户或者干些其它事情。

1.Cookie 剖析
    JSP 脚本通过 request 对象中的 getCookies() 方法来访问这些 cookie，这个方法会返回一个 Cookie 对象的数组。
    
2.Servlet Cookie 方法
     Cookie 对象中常用的方法：
1)	public void setDomain(String pattern)
	设置 cookie 的域名，比如 runoob.com
2)	public String getDomain()
	获取 cookie 的域名，比如 runoob.com
3)	public void setMaxAge(int expiry)
	设置 cookie 有效期，以秒为单位，默认有效期为当前session的存活时间
4)	public int getMaxAge()
	获取 cookie 有效期，以秒为单位，默认为-1 ，表明cookie会活到浏览器关闭为止
5)	public String getName()
	返回 cookie 的名称，名称创建后将不能被修改
6)	public void setValue(String newValue)
	设置 cookie 的值
7)	public String getValue()
	获取cookie的值
8)	public void setPath(String uri)
	设置 cookie 的路径，默认为当前页面目录下的所有 URL，还有此目录下的所有子目录
9)	public String getPath()
	获取 cookie 的路径
10)	public void setSecure(boolean flag)
	指明 cookie 是否要加密传输
11)	public void setComment(String purpose)
	设置注释描述 cookie 的目的。当浏览器将 cookie 展现给用户时，注释将会变得非常有用
12)	public String getComment()
	返回描述 cookie 目的的注释，若没有则返回 null

3.使用 JSP 设置 cookie
    (1)创建一个 cookie 对象： 调用 cookie 的构造函数，使用一个 cookie 名称和值做参数，它们都是字符串。
    Cookie cookie = new Cookie("key","value");
    (2) 设置有效期：调用 setMaxAge() 函数表明 cookie 在多长时间（以秒为单位）内有效。下面的操作将有效期设为了 24 小时。
    cookie.setMaxAge(60*60*24); 
    (3) 将 cookie 发送至 HTTP 响应头中：调用 response.addCookie() 函数来向 HTTP 响应头中添加 cookie。
    response.addCookie(cookie);
    
4.使用 JSP 读取 Cookie
    想要读取 cookie，您就需要调用 request.getCookies() 方法来获得一个 javax.servlet.http.Cookie 对象的数组，然后遍历这个数组，使用 getName() 方法和 getValue() 方法来获取每一个 cookie 的名称和值。

5. 使用 JSP 删除 cookie
    删除 cookie 非常简单。如果您想要删除一个 cookie，按照下面给的步骤来做就行了：
    获取一个已经存在的 cookie 然后存储在 Cookie 对象中。
    将 cookie 的有效期设置为 0。
    将这个 cookie 重新添加进响应头中。

    
*********************》》011：JSP Session
HTTP是无状态协议，这意味着每次客户端检索网页时，都要单独打开一个服务器连接，因此服务器不会记录下先前客户端请求的任何信息。
有三种方法来维持客户端与服务器的会话：

1. Cookies
网络服务器可以指定一个唯一的session ID作为cookie来代表每个客户端，用来识别这个客户端接下来的请求。
这可能不是一种有效的方式，因为很多时候浏览器并不一定支持cookie，所以我们不建议使用这种方法来维持会话。

2. 隐藏表单域
一个网络服务器可以发送一个隐藏的HTML表单域和一个唯一的session ID，就像下面这样：
    <input type="hidden" name="sessionid" value="12345">
这个条目意味着，当表单被提交时，指定的名称和值将会自动包含在GET或POST数据中。每当浏览器发送一个请求，session_id的值就可以用来保存不同浏览器的轨迹。
这种方式可能是一种有效的方式，但点击<AHREF>标签中的超链接时不会产生表单提交事件，因此隐藏表单域也不支持通用会话跟踪。

3. 重写URL
您可以在每个URL后面添加一些额外的数据来区分会话，服务器能够根据这些数据来关联session标识符。
举例来说，http://w3cschool.cc/file.htm;sessionid=12345， session标识符为sessionid=12345，服务器可以用这个数据来识别客户端。
相比而言，重写URL是更好的方式来，就算浏览器不支持cookies也能工作，但缺点是您必须为每个URL动态指定session ID，就算这是个简单的HTML页面。

4. session对象
除了以上几种方法外，JSP利用servlet提供的HttpSession接口来识别一个用户，存储这个用户的所有访问信息。
默认情况下，JSP允许会话跟踪，一个新的HttpSession对象将会自动地为新的客户端实例化。禁止会话跟踪需要显式地关掉它，通过将page指令中session属性值设为false来实现，就像下面这样：
    <%@ page session="false" %>
JSP引擎将隐含的session对象暴露给开发者。由于提供了session对象，开发者就可以方便地存储或检索数据。
下表列出了session对象的一些重要方法：
1)	public Object getAttribute(String name)
	返回session对象中与指定名称绑定的对象，如果不存在则返回null
2)	public Enumeration getAttributeNames()
	返回session对象中所有的对象名称
3)	public long getCreationTime()
	返回session对象被创建的时间， 以毫秒为单位，从1970年1月1号凌晨开始算起
4)	public String getId()
	返回session对象的ID
5)	public long getLastAccessedTime()
	返回客户端最后访问的时间，以毫秒为单位，从1970年1月1号凌晨开始算起
6)	public int getMaxInactiveInterval()
	返回最大时间间隔，以秒为单位，servlet 容器将会在这段时间内保持会话打开
7)	public void invalidate()
	将session无效化，解绑任何与该session绑定的对象
8)	public boolean isNew()
	返回是否为一个新的客户端，或者客户端是否拒绝加入session
9)	public void removeAttribute(String name)
	移除session中指定名称的对象
10)	public void setAttribute(String name, Object value) 
	使用指定的名称和值来产生一个对象并绑定到session中
11)	public void setMaxInactiveInterval(int interval)
	用来指定时间，以秒为单位，servlet容器将会在这段时间内保持会话有效

5. 删除Session数据
当处理完一个用户的会话数据后，您可以有如下选择：
    移除一个特定的属性：
    调用public void removeAttribute(String name)  方法来移除指定的属性。
    删除整个会话：
    调用public void invalidate() 方法来使整个session无效。
    设置会话有效期：
    调用 public void setMaxInactiveInterval(int interval)  方法来设置session超时。
    登出用户：
    支持servlet2.4版本的服务器，可以调用 logout()方法来登出用户，并且使所有相关的session无效。
    配置web.xml文件：
    如果使用的是Tomcat，可以向下面这样配置web.xml文件：
  <session-config>
    <session-timeout>15</session-timeout>
  </session-config>
超时以分钟为单位，Tomcat中的默认的超时时间是30分钟。
Servlet中的getMaxInactiveInterval( ) 方法以秒为单位返回超时时间。如果在web.xml中配置的是15分钟，则getMaxInactiveInterval( ) 方法将会返回900。


*********************》》012：JSP 文件上传
JSP 可以与 HTML form 标签一起使用，来允许用户上传文件到服务器。上传的文件可以是文本文件或图像文件或任何文档。
本章节我们使用 Servlet 来处理文件上传，使用到的文件有：
    upload.jsp : 文件上传表单。
    message.jsp : 上传成功后跳转页面。
    UploadServlet.java : 上传处理 Servlet。
    需要引入的 jar 文件：commons-fileupload-1.3.2、commons-io-2.5.jar。
    
1. 创建一个文件上传表单  
下面的 HTML 代码创建了一个文件上传表单。以下几点需要注意：
    表单 method 属性应该设置为 POST 方法，不能使用 GET 方法。
    表单 enctype 属性应该设置为 multipart/form-data.
    表单 action 属性应该设置为在后端服务器上处理文件上传的 Servlet 文件。下面的实例使用了 UploadServlet Servlet 来上传文件。
    上传单个文件，您应该使用单个带有属性 type="file" 的 <input .../> 标签。为了允许多个文件上传，请包含多个 name 属性值不同的 input 标签。输入标签具有不同的名称属性的值。浏览器会为每个 input 标签关联一个浏览按钮。

2. 编写后台 Servlet
以下是 UploadServlet 的源代码，同于处理文件上传，在这之前我们先确保依赖包已经引入到项目的 WEB-INF/lib 目录下：
    下面的实例依赖于 FileUpload，所以一定要确保在您的 classpath 中有最新版本的 commons-fileupload.x.x.jar 文件。可以从 http://commons.apache.org/proper/commons-fileupload/ 下载。
    FileUpload 依赖于 Commons IO，所以一定要确保在您的 classpath 中有最新版本的 commons-io-x.x.jar 文件。可以从 http://commons.apache.org/proper/commons-io/ 下载。

注意：添加上面两个jar的时候，注意添加到 WEB-INF 下 lib 目录里面，并添加到 build path，否则会报错:
java.lang.ClassNotFoundException: org.apache.commons.fileupload.servlet.ServletFileUpload