1.启动 Tomcat:
D:\apache-tomcat-8.5.15\bin\startup.bat


*********************》》001：JSP 语法
脚本程序的语法格式：
<% 代码片段 %>
或者
<jsp:scriptlet>
   代码片段
</jsp:scriptlet>


1.JSP声明：
格式 <%! declaration; [ declaration; ]+ ... %>
示例 <%! int i = 0; %>
或者
<jsp:declaration>
   代码片段
</jsp:declaration>

2.JSP表达式:
格式 <%= 表达式 %>
示例 <%= (new java.util.Date()).toLocaleString()%>
或者
<jsp:expression>
   表达式
</jsp:expression>

3.JSP注释：
<%-- 注释 --%>   JSP注释，注释内容不会被发送至浏览器甚至不会被编译
<!-- 注释 -->    HTML注释，通过浏览器查看网页源代码时可以看见注释内容 

4.JSP几个显示常量：
<\%   代表静态 <%常量
%\>   代表静态 %> 常量
\'    在属性中使用的单引号
\"    在属性中使用的双引号

5.JSP指令：
指令语法格式  <%@ directive attribute="value" %>
<%@ page ... %> 	定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等
<%@ include ... %> 	包含其他文件
<%@ taglib ... %> 	引入标签库的定义，可以是自定义标签

6.JSP行为：
行为标签语法格式  <jsp:action_name attribute="value" />
jsp:include 	    用于在当前页面中包含静态或动态资源
jsp:useBean 	    寻找和初始化一个JavaBean组件
jsp:setProperty 	设置 JavaBean组件的值
jsp:getProperty     将 JavaBean组件的值插入到 output中
jsp:forward 	    从一个JSP文件向另一个文件传递一个包含用户请求的request对象
sp:plugin 	        用于在生成的HTML页面中包含Applet和JavaBean对象
jsp:element 	    动态创建一个XML元素
jsp:attribute 	    定义动态创建的XML元素的属性
jsp:body 	        定义动态创建的XML元素的主体
jsp:text 	        用于封装模板数据

7.JSP隐含对象（九个自动定义的变量）
request 	    HttpServletRequest类的实例
response 	    HttpServletResponse类的实例
out 	        PrintWriter类的实例，用于把结果输出至网页上
session 	    HttpSession类的实例
application 	ServletContext类的实例，与应用上下文有关
config 	        ServletConfig类的实例
pageContext 	PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问
page 	        类似于Java类中的this关键字
Exception 	    Exception类的对象，代表发生错误的JSP页面中对应的异常对象

8. 控制流语句
JSP提供对Java语言的全面支持。您可以在JSP程序中使用Java API甚至建立Java代码块，包括判断语句和循环语句等等。
1).判断语句
If...else块
switch...case块
2).循环语句
for，
while，
do…while


*********************》》002：JSP指令
<%@ directive attribute="value" %>
1.Page指令
Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令
语法格式：
<%@ page attribute="value" %>
page指令相关属性：
buffer              指定out对象使用缓冲区的大小 
autoFlush           控制out对象的 缓存区 
contentType         指定当前JSP页面的MIME类型和字符编码 
errorPage           指定当JSP页面发生异常时需要转向的错误处理页面 
isErrorPage         指定当前页面是否可以作为另一个JSP页面的错误处理页面 
extends             指定servlet从哪一个类继承 
import              导入要使用的Java类 
info                定义JSP页面的描述信息 
isThreadSafe        指定对JSP页面的访问是否为线程安全 
language            定义JSP页面所用的脚本语言，默认是Java 
session             指定JSP页面是否使用session 
isELIgnored         指定是否执行EL表达式 
isScriptingEnabled  确定脚本元素能否被使用 

2.Include指令
JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。
语法格式：
<%@ include file="文件相对 url 地址" %>

3.Taglib指令
JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。
Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。
语法格式：
<%@ taglib uri="uri" prefix="prefixOfTag" %>
uri属性确定标签库的位置，prefix属性指定标签库的前缀。


*********************》》003：JSP 动作元素
JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的。
利用JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面、为Java插件生成HTML代码。
语法 <jsp:action_name attribute="value" />
1.语法:
jsp:include	    在页面被请求的时候引入一个文件。
jsp:useBean	    寻找或者实例化一个JavaBean。
jsp:setProperty	设置JavaBean的属性。
jsp:getProperty	输出某个JavaBean的属性。
jsp:forward	    把请求转到一个新的页面。
jsp:plugin	    根据浏览器类型为Java插件生成OBJECT或EMBED标记。
jsp:element	    定义动态XML元素
jsp:attribute	设置动态定义的XML元素属性。
jsp:body	    设置动态定义的XML元素内容。
jsp:text	    在JSP页面和文档中使用写入文本的模板

2.常见的属性
 id属性：
id属性是动作元素的唯一标识，可以在JSP页面中引用。动作元素创建的id值可以通过PageContext来调用。
 scope属性：
该属性用于识别动作元素的生命周期。 id属性和scope属性有直接关系，scope属性定义了相关联id对象的寿命。 scope属性有四个可能的值： (a) page, (b)request, (c)session, 和 (d) application。 

3.<jsp:include>动作元素 
jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：
<jsp:include page="相对 URL 地址" flush="true" />
include动作相关的属性列表:
page	包含在页面中的相对URL地址。
flush	布尔属性，定义在包含资源前是否刷新缓存区。

4.<jsp:useBean>动作元素
jsp:useBean 动作用来加载一个将在JSP页面中使用的JavaBean。 这个功能非常有用，因为它使得我们可以发挥 Java 组件复用的优势。
 语法为：
 <jsp:useBean id="name" class="package.class" />
 在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。
以下是useBean动作相关的属性列表。
class	    指定Bean的完整包名。
type	    指定将引用该对象变量的类型。
beanName	通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。

5.<jsp:setProperty>动作元素
jsp:setProperty用来设置已经实例化的Bean对象的属性，有两种用法。
1).在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示： 
    <jsp:useBean id="myName" ... />
    ...
    <jsp:setProperty name="myName" property="someProperty" .../>
  此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行  
2).把jsp:setProperty放入jsp:useBean元素的内部，如下所示： 
    <jsp:useBean id="myName" ... >
    ...
       <jsp:setProperty name="myName" property="someProperty" .../>
    </jsp:useBean>
  此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。 
jsp:setProperty动作有下面四个属性,如下表：
name	    name属性是必需的。它表示要设置属性的是哪个Bean。
property	property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是"*"，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。
value	    value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如"true"）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如"42"）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。
param	    param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。 

6.<jsp:getProperty>动作元素
jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。语法格式如下：
    <jsp:useBean id="myName" ... />
    ...
    <jsp:getProperty name="myName" property="someProperty" .../>
下表是与getProperty相关联的属性：
name	    要检索的Bean属性名称。Bean必须已定义。
property	表示要提取Bean属性的值
    
7.<jsp:forward> 动作元素  
jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。语法格式如下所示：
<jsp:forward page="相对 URL 地址" />
page	page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.

8.<jsp:plugin>动作元素
jsp:plugin动作用来根据浏览器的类型，插入通过Java插件 运行Java Applet所必需的OBJECT或EMBED元素。
如果需要的插件不存在，它会下载插件，然后执行Java组件。 Java组件可以是一个applet或一个JavaBean。
plugin动作有多个对应HTML元素的属性用于格式化Java 组件。param元素可用于向Applet 或 Bean 传递参数。
以下是使用plugin 动作元素的典型实例:
    <jsp:plugin type="applet" codebase="dirname" code="MyApplet.class"
                               width="60" height="80">
       <jsp:param name="fontcolor" value="red" />
       <jsp:param name="background" value="black" />
       <jsp:fallback>
          Unable to initialize Java Plugin
       </jsp:fallback>
    </jsp:plugin>
    
9.<jsp:element> 、 <jsp:attribute>、 <jsp:body>动作元素
<jsp:element> 、 <jsp:attribute>、 <jsp:body>动作元素动态定义XML元素。动态是非常重要的，这就意味着XML元素在编译时是动态生成的而非静态。
以下实例动态定义了XML元素：
    <jsp:element name="xmlElement">
    <jsp:attribute name="xmlElementAttr">
       属性值
    </jsp:attribute>
    <jsp:body>
       XML 元素的主体
    </jsp:body>
    </jsp:element>

9.<jsp:text>动作元素
<jsp:text>动作元素允许在JSP页面和文档中使用写入文本的模板，语法格式如下：
<jsp:text>模板数据</jsp:text>

<jsp:text><![CDATA[<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"DTD/xhtml1-strict.dtd">]]>
</jsp:text>
<head><title>jsp:text action</title></head>
<body>

<books><book><jsp:text>  
    Welcome to JSP Programming
</jsp:text></book></books>

</body>
</html>


